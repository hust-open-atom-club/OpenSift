services:
  db:
    image: postgres
    command: -c 'max_connections=500'
    restart: always
    shm_size: 128mb
    volumes:
      - ${DATA_DIR}/db:/data/postgres
    ports:
      - "${DB_HOST_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWD}
      PGDATA: /data/postgres
  app:
    build: .
    restart: always
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    command:
      - /app/workflow-runner
      - -c
      - /config/config.yaml
      - --rpc-workflow
      - "0.0.0.0:50051"
    volumes:
      - ${DATA_DIR}/config:/config:ro
      - ${DATA_DIR}/rec:/data/rec
      - ${DATA_DIR}/log:/data/log
      - ${STORAGE_DIR}:/storage
      - ${GENTOO_PREFIX_DIR}:/root/gentoo
  gitcollector:
    build: .
    command:
      - /app/git-metadata-collector
      - -c
      - /config/config.yaml
    volumes:
      - ${DATA_DIR}/config:/config:ro
      - ${STORAGE_DIR}:/storage
      - ./data/es/certs:/escerts
  apiserver:
    build: .
    restart: always
    command: 
      - /app/apiserver
      - -c
      - /config/config.yaml
    ports:
      - "${APISERVER_HOST_PORT}:5000"
    volumes:
      - ${DATA_DIR}/config:/config:ro
  web:
    build:
      context: web
    environment:
      - BACKEND=http://apiserver:5000
    ports:
      - "${WEB_HOST_PORT}:80"
  
  pgweb:
    container_name: pgweb
    restart: always
    image: sosedoff/pgweb
    ports:
      - "${PGWEB_HOST_PORT}:8081"
    entrypoint:
      - "/usr/bin/pgweb"
      - "--bind=0.0.0.0"
      - "--listen=8081"
      - "--readonly"
      - "--host=db"
      - "--port=5432"
      - "--user=postgres"
      - "--pass=${DB_PASSWD}"
      - "--db=criticality_score"
      - "--ssl=disable"
  ## log service
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    volumes:
      - ./data/es/certs:/usr/share/elasticsearch/config/certs
      - ./data/es/esdata:/usr/share/elasticsearch/data
      - ./data/es/kibanadata:/usr/share/elasticsearch/kibanadata
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es\n"\
          "    dns:\n"\
          "      - es\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        chown 1000:1000 data;
        chown 1000:1000 kibanadata;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es/es.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    volumes:
      - ./data/es/certs:/usr/share/elasticsearch/config/certs
      - ./data/es/esdata:/usr/share/elasticsearch/data
    ports:
      - ${ELASTIC_HOST_PORT}:9200
    environment:
      - node.name=es
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es/es.key
      - xpack.security.http.ssl.certificate=certs/es/es.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es/es.key
      - xpack.security.transport.ssl.certificate=certs/es/es.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
      - xpack.ml.use_auto_machine_memory_percent=true
      - cluster.routing.allocation.disk.threshold_enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.17.1
    volumes:
      - ./data/es/certs:/usr/share/kibana/config/certs
      - ./data/es/kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_HOST_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120